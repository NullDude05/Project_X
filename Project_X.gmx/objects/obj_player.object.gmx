<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting Player Convars
hsp = 0;
vsp = 0;
grav = 0.2;
grounded = 0;
spd = 3;
jsp = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement
//Key Vars
key_left = keyboard_check_direct(ord("A"));
key_right = keyboard_check_direct(ord("D"));
key_up = keyboard_check_pressed(ord("W"));
attack_key = keyboard_check_pressed(ord("X"));

//Horizontal Movement
if (key_left) { 
    if (hsp &gt; -3) { 
    hsp -= 0.15;
    //right wall jump
    if (place_meeting(x+1, y, obj_wall) &amp;&amp; !place_meeting(x, y+1, obj_wall) &amp;&amp; !key_right) {
    vsp = -jsp;
    }
    }
}
if (key_right) {
    if (hsp &lt; 3) {
    hsp += 0.15;
    //Left Wall Jump
    if (place_meeting(x-1, y, obj_wall) &amp;&amp; !place_meeting(x, y+1, obj_wall) &amp;&amp; !key_left) {
    vsp = -jsp;
    }
    }
}

//Horizontal Stop
if(!key_left &amp;&amp; !key_right) or (key_left &amp;&amp; key_right) {
hsp = 0;
}

//Vertical Movement
if (key_up) &amp;&amp; (grounded){
    vsp = -8;
}

//Gravity
vsp += grav;


//Horizontal Collisions 
if place_meeting(x+hsp, y, par_wall) {
    while(!place_meeting(x+sign(hsp), y, par_wall)) x += sign(hsp);
    hsp = 0;
}

//Finalize Horizontal
x += hsp;

//Vertical Collisions
if place_meeting(x, y+vsp, par_wall) {
    while(!place_meeting(x, y+sign(vsp), par_wall)) y += sign(vsp);
    if(sign(vsp) == 1) {
    grounded = 1;
    }
    vsp = 0;
}
else {
    grounded = 0;
}

//Finalize Vertical
y += vsp;

//Animate
    if (xprevious != x) {
    sprite_index = spr_player_walk;
    image_speed = .3;      
} else { 
    sprite_index = spr_player;
}

//Control direction the player is facing
if (yprevious != y) {
    sprite_index = spr_jump;
    image_speed = 0;
    image_index = y&gt;yprevious;
} else {
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x) {
    image_xscale = -1;
}
}

//Attack State
image_speed = .5;
if (sprite_index == spr_player_walk) {
    sprite_index = spr_attack_right;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
